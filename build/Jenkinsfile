// Default Paramaters
def default_git_repository_credentials = "git_repository_credentials"

def default_docker_registry = "registry.hub.docker.com"
def default_docker_registry_credentials = "docker_registry_credentials"

def default_not_jenkins_url = "https://not-jenkins2.thehempathy.com"
def default_not_jenkins_secret = "not_jenkins_token"


// Internal variable for pipeline
def invalidParam = false
def autoCancelled = false
def build = false
def promote = false

pipeline {
    agent any

    parameters {
        //string(name: 'gitBranch', description: 'Git Branch to clone')
        string(name: 'gitBranch', defaultValue: 'develop', description: 'Git Branch to clone')
        //string(name: 'gitRepository', description: 'Git Repository')
        string(name: 'gitRepository', defaultValue:'toto.git', description: 'Git Repository')
        string(name: 'gitRepositoryCredentials', defaultValue: "${default_git_repository_credentials}", description: 'Git Repository Credentials')

        string(name: 'dockerRegistry', defaultValue: "${default_docker_registry}", description: 'Docker Registry')
        string(name: 'dockerRegistryCredentials', defaultValue: "${default_docker_registry_credentials}", description: 'Docker Registry Credentials')
        //string(name: 'dockerNamespace', description: 'Docker Name Space')
        string(name: 'dockerNamespace', defaultValue: 'totonamespace', description: 'Docker Name Space')
        //string(name: 'dockerImageName', description: 'The last extension of a docker image name')
        string(name: 'dockerImageName', defaultValue: 'totoimage', description: 'The last extension of a docker image name')

        //string(name: 'dockerStackName', description: 'Docker Stack Name to deploy to')
        string(name: 'dockerStackName', defaultValue: 'totstacknam', description: 'Docker Stack Name to deploy to')
        //string(name: 'dockerServiceName', description: 'Docker Service Name to deploy to')
        string(name: 'dockerServiceName', defaultValue: 'totoservice', description: 'Docker Service Name to deploy to')

        string(name: 'notJenkinsUrl', defaultValue: "${default_not_jenkins_url}", description: 'Not Jenkins Url')
        string(name: 'notJenkinsSecret', defaultValue: "${default_not_jenkins_secret}", description: 'Not Jenkins secret')

    }


    environment {
        GIT_BRANCH = "${params.gitBranch}"
        GIT_REPOSITORY = "${params.gitRepository}"
        GIT_REPOSITORY_CREDENTIALS = credentials("${params.gitRepositoryCredentials}")

        DOCKER_REGISTRY = "${params.dockerRegistry}"
        DOCKER_REGISTRY_CREDENTIALS = credentials("${params.dockerRegistryCredentials}")

        DOCKER_NAMESPACE = "${params.dockerNamespace}"
        DOCKER_IMAGE_NAME = "${params.dockerImageName}"

        DOCKER_STACK_NAME = "${params.dockerStackName}"
        DOCKER_SERVICE_NAME = "${params.dockerServiceName}"

        NOT_JENKINS_URL = "${params.notJenkinsUrl}"
        NOT_JENKINS_SECRET = "${params.notJenkinsSecret}"

    }

    stages {
        stage ('Validate Parameters') {

            steps {
                script {
                  
                    if ( !params.gitBranch ) {
                        invalidParam("gitBranch")
                    }                 
                    if ( !params.gitRepository ) {
                        invalidParam("gitRepository")
                    }   
                    if ( !params.gitRepositoryCredentials ) {
                        invalidParam("gitRepositoryCredentials")
                    }   

                    if ( !params.dockerRegistry ) {
                        invalidParam("dockerRegistry")
                    }  
                    if ( !params.dockerRegistryCredentials ) {
                        invalidParam("dockerRegistryCredentials")
                    }   
                    echo "validating docker name space"
                    if ( params.dockerNamespace == null ) {
                        echo "ok param is null"
                    } else {
                        echo "ok param is not null. what is it then?????????????"
                        echo params.dockerNamespace
                    }
                    if ( !params.dockerNamespace ) {
                        invalidParam("dockerNamespace")
                    }   
                    echo "fuck we did pass through"
                    if ( !params.dockerImageName ) {
                        invalidParam("dockerImageName")
                    }   
                    if ( !params.dockerStackName ) {
                        invalidParam("dockerStackName")
                    }   
                    if ( !params.dockerServiceName ) {
                        invalidParam("dockerServiceName")
                    }   
                    if ( !params.notJenkinsUrl ) {
                        invalidParam("notJenkinsUrl")
                    }   
                    if ( !params.notJenkinsSecret ) {
                        invalidParam("notJenkinsSecret")
                    }   
                    
                    if( invalidParam ) {
                        echo "Invalid parameters detected. Aborting pipeline..."
                        autoCancelled = true
                    }
                }
            }

        }
        stage ('Prepare build') {
            when {
                expression {
                    return !autoCancelled
                }
            }
            steps {
                script {
                    def releasePattern = /release\/(.*)/
                    def gitBranchName = "${env.GIT_BRANCH}"

                     switch(gitBranchName) {
                        case "develop":
                            build = true
                            env.DOCKER_VERSION = "latest"
                            env.DEPLOY_ENV = "dev"
                            break
                        case ~releasePattern:
                            def matcher = gitBranchName =~ releasePattern
                            def version = matcher[0][1]
                            env.DOCKER_VERSION = version
                            env.DEPLOY_ENV = "stage"
                            build = true
                            break
                        case "master":
                            promote = true
                            sh "git remote set-url origin https://${GIT_REPOSITORY_CREDENTIALS_USR}:${GIT_REPOSITORY_CREDENTIALS_PSW}@${GIT_REPOSITORY}"
                            sh "git fetch --tags > /dev/null"
                            env.DOCKER_VERSION = sh (returnStdout: true, script: '''
                                echo $(git tag --points-at HEAD)
                                ''').trim()
                            env.DEPLOY_ENV = "prod"
                    }

                    if ( build ) {
                        echo "Building version ${env.VERSION} in ${env.DEPLOY_ENV}"
                    }
                    
                    if ( promote ) {
                        echo "Promoting version ${env.VERSION} in ${env.DEPLOY_ENV}"
                    }

                    env.DOCKER_FULL_IMAGE_NAME = "${env.DOCKER_REGISTRY}/${env.DOCKER_NAMESPACE}/${env.DOCKER_IMAGE_NAME}:${env.DOCKER_VERSION}"
                }
            }
        }
        stage('Build') {
            when {
                expression {
                    return !autoCancelled
                }
            }
            steps {
                echo 'Building..'

                script {
                    sh 'chmod +x ./jenkins/scripts/build.sh'
                    sh 'sudo -E ./jenkins/scripts/build.sh'
                }
            }
        }
        stage('Test API') {
            when {
                expression {
                    return !autoCancelled
                }
            }
            environment {
                FULL_NAME = "${env.imageName}"
                DB_NAME = "registry.philippeduval.ca/thehempathy/database"
            }
            steps {
                echo 'Not testing..'
                //sh 'sudo -E ./jenkins/scripts/test.sh'
            }
        }
        stage('Deploy') {
            when {
                expression {
                    return !autoCancelled
                }
            }
            environment {
                NOT_JENKINS_URL = "${not_jenkins_addr}/${namespace}-${env.DEPLOY_ENV}/${image_name}"
            }
            steps {
                echo 'Deploying....'
                //sh 'sudo -E ./jenkins/scripts/deploy.sh'
            }
        }

    }
}

def paramInvalid ( param ) {
    invalidParam = true
    echo "Param ${param} was not set"
}