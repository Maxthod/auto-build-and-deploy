// Default Paramaters
def default_git_repository_credentials = "git_repository_credentials"

def default_docker_registry = "registry.hub.docker.com"
def default_docker_registry_credentials = "docker_registry_credentials"

def default_not_jenkins_url = "https://not-jenkins2.thehempathy.com"
def default_not_jenkins_secret = "not_jenkins_token"


// Internal variable for pipeline
def invalidParam = false
def autoCancelled = false
def build = false
def promote = false

pipeline {
    agent any

    parameters {
        //string(name: 'gitBranch', description: 'Git Branch to clone')
        string(name: 'gitBranch', defaultValue: 'develop', description: 'Git Branch to clone')
        //string(name: 'gitRepository', description: 'Git Repository')
        string(name: 'gitRepository', defaultValue:'toto.git', description: 'Git Repository')
        string(name: 'gitRepositoryCredentials', defaultValue: "${default_git_repository_credentials}", description: 'Git Repository Credentials')

        string(name: 'dockerRegistry', defaultValue: "${default_docker_registry}", description: 'Docker Registry')
        string(name: 'dockerRegsitryCredentials', defaultValue: "${default_docker_registry_credentials}", description: 'Docker Registry Credentials')
        //string(name: 'dockerNamespace', description: 'Docker Name Space')
        string(name: 'dockerNamespace', defaultValue: 'totonamespace', description: 'Docker Name Space')
        //string(name: 'dockerImageName', description: 'The last extension of a docker image name')
        string(name: 'dockerImageName', defaultValue: 'totoimage', description: 'The last extension of a docker image name')

        //string(name: 'dockerStackName', description: 'Docker Stack Name to deploy to')
        string(name: 'dockerStackName', defaultValue: 'totstacknam', description: 'Docker Stack Name to deploy to')
        //string(name: 'dockerServiceName', description: 'Docker Service Name to deploy to')
        string(name: 'dockerServiceName', defaultValue: 'totoservice', description: 'Docker Service Name to deploy to')

        string(name: 'notJenkinsUrl', defaultValue: "${default_not_jenkins_url}", description: 'Not Jenkins Url')
        string(name: 'notJenkinsSecret', defaultValue: "${default_not_jenkins_secret}", description: 'Not Jenkins secret')

    }


    environment {
        GIT_BRANCH = "${params.gitBranch}"
        GIT_REPOSITORY = "${params.gitRepository}"
        GIT_REPOSITORY_CREDENTIALS = credentials("${params.gitRepositoryCredentials}")
        DOCKER_REGISTRY = "${params.dockerRegistry}"
        DOCKER_REGISTRY_CREDENTIALS = credentials("${params.dockerRegistryCredentials}")
        DOCKER_NAMESPACE = "${params.dockerNamespace}"
        DOCKER_IMAGE_NAME = "${params.dockerImageName}"
        DOCKER_STACK_NAME = "${params.dockerStackName}"
        DOCKER_SERVICE_NAME = "${params.dockerServiceName}"
        NOT_JENKINS_URL = "${params.notJenkinsUrl}"
        NOT_JENKINS_SECRET = "${params.notJenkinsSecret}"
    }

    stages {
        stage ('Validate Parameters') {

            steps {
                script {
                    echo "At least"
                    if ( !params.gitRepository ) {
                        invalidParam("gitRepository")
                    }                 

                    if( invalidParam ) {
                        echo "Invalid parameters detected. Aborting pipeline..."
                        autoCancelled = true
                    }
                }
            }

        }

    }
}

def paramInvalid ( param ) {
    invalidParam = true
    echo "Param ${param} was not set"
}